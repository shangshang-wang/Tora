# Config for sync multi-node GRPO in lora_grpo_distributed.py
# using a Qwen-14B Base model (which is known to train quickly on this task).
#
# Also check out the async implementation of this workflow in this directory.
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download Qwen/Qwen2.5-14B --output-dir /tmp/Qwen2.5-14B
#
# To launch on 2 devices, run the following command from root:
# tune run --nproc_per_node 2 lora_grpo_distributed --config qwen2_5/14B_qlora_grpo
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 2 lora_grpo_distributed --config qwen2_5/14B_qlora_grpo checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
#
# Furthermore, you can launch it on multiple nodes by going to recipes/dev/ and using
#  sbatch multinode_grpo.sbatch

base_model_dir: ${oc.env:BASE_MODEL_DIR}
base_output_dir: ${oc.env:BASE_OUTPUT_DIR}
name: ${oc.env:CONFIG_NAME}

output_dir: ${base_output_dir}/${name}
base_model_path: ${base_model_dir}/Qwen2.5-14B  # Use this to train from the slightly trained SFT model

# Tokenizer
tokenizer:
  _component_: torchtune.models.qwen2_5.qwen2_5_tokenizer
  path: ${base_model_dir}/Qwen2.5-14B/vocab.json
  merges_file: ${base_model_dir}/Qwen2.5-14B/merges.txt
  max_seq_len: 1024

# Dataset
dataset:
  _component_: torchtune.dev.grpo.gsm8k.gsm8k_dataset
  partition: 1-9/10
seed: null
shuffle: False

# Model Arguments
model:
  _component_: torchtune.models.qwen2_5.qlora_qwen2_5_14b_base
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 1  # higher increases accuracy and memory
  lora_alpha: 2  # usually alpha=2*rank
  lora_dropout: 0.0
  lora_type: "lora" # "lora", "dora", "dora_cache"

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_model_path}
  checkpoint_files: [
    model-00001-of-00008.safetensors,
    model-00002-of-00008.safetensors,
    model-00003-of-00008.safetensors,
    model-00004-of-00008.safetensors,
    model-00005-of-00008.safetensors,
    model-00006-of-00008.safetensors,
    model-00007-of-00008.safetensors,
    model-00008-of-00008.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: QWEN2


ref_checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_model_path}
  checkpoint_files: [
    model-00001-of-00008.safetensors,
    model-00002-of-00008.safetensors,
    model-00003-of-00008.safetensors,
    model-00004-of-00008.safetensors,
    model-00005-of-00008.safetensors,
    model-00006-of-00008.safetensors,
    model-00007-of-00008.safetensors,
    model-00008-of-00008.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}/ref  # shouldn't be used?
  model_type: QWEN2
fsdp_reshard_after_forward: False


resume_from_checkpoint: False
save_every_n_epochs: 1

# Fine-tuning arguments
batch_size: 2
grpo_samples: 4
forward_batch_size: 1
max_generated_tokens: 512
top_k: null
temperature: 1.0

ppo_epochs: 1

num_steps: 200

clip_grad_norm: 1.0

epochs: 10
optimizer:
  _component_: torch.optim.AdamW
  lr: 1e-4
  fused: True
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 50
loss:
  _component_: torchtune.dev.grpo.loss.GRPOSimpleLoss
  kl_coeff: 0.01
  epsilon: 0.2

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
compile: False  # pytorch compile, set to true for better perf/memory

# Reduced precision
dtype: bf16

reward_functions:
    - _component_: torchtune.dev.rl.rewards.FormattedMathCorrectnessReward
      answer_tag: answer
      positive_reward: 10.0
      negative_reward: 0.0
    - _component_: torchtune.dev.rl.rewards.ThinkingAnswerFormattingReward
      think_tag: think
      answer_tag: answer
      positive_reward: 1.0
      negative_reward: 0.0

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
#  log_dir: ${output_dir}/logs
  project: Tora_grpo_dev
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: True
  with_stack: True
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
